module Days.Day17 exposing (printTower, puzzleInput, solution, testSolution)

import Array exposing (Array)
import Expect
import Set exposing (Set)
import Test


solution : String -> ( String, String )
solution input =
    ( run1 input 2022 |> String.fromInt
    , run2 input 1000000000000 |> String.fromInt
    )


testSolution : Test.Test
testSolution =
    Test.test "test input" <|
        \_ -> solution testInput |> Expect.equal ( "3068", "1514285714288" )


run1 : String -> Int -> Int
run1 input steps =
    parseInput input
        |> letRockFall steps Infinite
        |> towerHight


run2 : String -> Int -> Int
run2 input steps =
    let
        tower =
            parseInput input

        runOnceTower =
            letRockFall steps (OnlyNTimes 5) tower

        runTwiceTower =
            letRockFall steps (OnlyNTimes 10) tower

        highPerBlock =
            towerHight runTwiceTower - towerHight runOnceTower

        shapesPerBlock =
            runTwiceTower.shapeIdx - runOnceTower.shapeIdx

        repeatingBlocksHight =
            (floor (toFloat steps / toFloat shapesPerBlock) - 1) * highPerBlock

        prefixAndSuffix =
            modBy shapesPerBlock steps + shapesPerBlock

        prefixAndSuffixHight =
            letRockFall prefixAndSuffix Infinite tower |> towerHight
    in
    repeatingBlocksHight + prefixAndSuffixHight


type alias Tower =
    { directions : Array Direction
    , directionIdx : Int
    , rocks : Set Position
    , shapeIdx : Int
    }


parseInput : String -> Tower
parseInput input =
    let
        directions =
            String.toList input
                |> List.map
                    (\c ->
                        case c of
                            '<' ->
                                Left

                            _ ->
                                Right
                    )
                |> Array.fromList
    in
    { directions = directions
    , directionIdx = 0
    , rocks = Set.empty
    , shapeIdx = 0
    }


printTower : Tower -> String
printTower tower =
    let
        bottom =
            "+-------+"

        hight =
            towerHight tower

        tail =
            List.range 1 hight
                |> List.map
                    (\y ->
                        let
                            content =
                                List.range 0 6
                                    |> List.map
                                        (\x ->
                                            if Set.member ( x, y ) tower.rocks then
                                                '#'

                                            else
                                                '.'
                                        )
                                    |> String.fromList
                        in
                        "|" ++ content ++ "|"
                    )
    in
    bottom
        :: tail
        |> List.reverse
        |> String.join "\n"


towerHight : Tower -> Int
towerHight tower =
    Set.foldl
        (\( _, y ) acc ->
            max y acc
        )
        0
        tower.rocks


type alias Position =
    ( Int, Int )


type alias Shape =
    Set Position


allShapes : Array Shape
allShapes =
    Array.fromList
        [ Set.fromList [ ( 0, 0 ), ( 1, 0 ), ( 2, 0 ), ( 3, 0 ) ]
        , Set.fromList [ ( 0, 1 ), ( 1, 1 ), ( 2, 1 ), ( 1, 0 ), ( 1, 2 ) ]
        , Set.fromList [ ( 0, 0 ), ( 1, 0 ), ( 2, 0 ), ( 2, 1 ), ( 2, 2 ) ]
        , Set.fromList [ ( 0, 0 ), ( 0, 1 ), ( 0, 2 ), ( 0, 3 ) ]
        , Set.fromList [ ( 0, 0 ), ( 0, 1 ), ( 1, 0 ), ( 1, 1 ) ]
        ]


shapeWidth : Shape -> Int
shapeWidth shape =
    Set.foldl
        (\( x, _ ) acc ->
            max x acc
        )
        0
        shape
        + 1


type alias MovingShape =
    { shape : Shape
    , leftBottom : Position
    }


movingShapeToAbsolute : MovingShape -> Shape
movingShapeToAbsolute { shape, leftBottom } =
    let
        ( x, y ) =
            leftBottom
    in
    Set.map (\( rx, ry ) -> ( rx + x, ry + y )) shape


{-| letRockFall throws the next rock at the tower and moves it until it reaches
bottom.

Does this 'depth' times.

Returns a new Tower where the rock is merged with its structure.

-}
letRockFall : Int -> RepeatInstructions -> Tower -> Tower
letRockFall depth repeat tower =
    if depth <= 0 then
        tower

    else
        let
            ( towerAfterNextShape, movingShape ) =
                nextShape tower
        in
        case rockFallStep towerAfterNextShape repeat movingShape of
            Just ( towerAfterRockFallStep, _ ) ->
                letRockFall (depth - 1) repeat towerAfterRockFallStep

            Nothing ->
                tower


nextShape : Tower -> ( Tower, MovingShape )
nextShape tower =
    let
        shapeIdx =
            tower.shapeIdx |> modBy (Array.length allShapes)

        shape =
            Array.get shapeIdx allShapes
                |> Maybe.withDefault Set.empty

        leftBottom =
            ( 2
            , towerHight tower + 4
            )
    in
    ( { tower | shapeIdx = tower.shapeIdx + 1 }
    , { shape = shape, leftBottom = leftBottom }
    )


type FallingOrRest
    = StillFalling MovingShape
    | AtRest MovingShape


rockFallStep : Tower -> RepeatInstructions -> MovingShape -> Maybe ( Tower, Maybe MovingShape )
rockFallStep tower repeat movingShape =
    nextDirection tower repeat
        |> Maybe.andThen
            (\( towerAfterDirection, direction ) ->
                case moveRock direction movingShape towerAfterDirection of
                    StillFalling shape ->
                        rockFallStep towerAfterDirection repeat shape

                    AtRest shape ->
                        let
                            towerAfterMerge =
                                mergeShapeInTower towerAfterDirection shape
                        in
                        Just ( towerAfterMerge, Nothing )
            )


type RepeatInstructions
    = Infinite
    | OnlyNTimes Int


nextDirection : Tower -> RepeatInstructions -> Maybe ( Tower, Direction )
nextDirection tower repeatInstructions =
    let
        directionIdx =
            tower.directionIdx |> modBy (Array.length tower.directions)

        direction =
            Array.get directionIdx tower.directions
                |> Maybe.withDefault Left

        result =
            ( { tower | directionIdx = tower.directionIdx + 1 }
            , direction
            )
                |> Just
    in
    case repeatInstructions of
        Infinite ->
            result

        OnlyNTimes n ->
            if tower.directionIdx > n * Array.length tower.directions then
                Nothing

            else
                result


mergeShapeInTower : Tower -> MovingShape -> Tower
mergeShapeInTower tower movingShape =
    { tower
        | rocks =
            movingShapeToAbsolute movingShape
                |> Set.union tower.rocks
    }


{-| moveRock places the moving shape one place at direction and one place at bottom.

Only moves sideways if it is possible.

If it hits the ground, then the shape 'AtRest'.

-}
moveRock : Direction -> MovingShape -> Tower -> FallingOrRest
moveRock direction movingShape tower =
    let
        toSideway =
            { movingShape
                | leftBottom = movingShape.leftBottom |> Tuple.mapFirst (directionToFn direction)
            }

        movedSideway =
            if isColliding tower toSideway then
                movingShape

            else
                toSideway

        toBottom =
            { movedSideway
                | leftBottom = movedSideway.leftBottom |> Tuple.mapSecond ((+) -1)
            }
    in
    if isColliding tower toBottom then
        AtRest movedSideway

    else
        StillFalling toBottom


isColliding : Tower -> MovingShape -> Bool
isColliding tower ({ shape, leftBottom } as movingShape) =
    let
        ( x, y ) =
            leftBottom
    in
    if y == 0 then
        True

    else if x < 0 then
        True

    else if x > 7 - shapeWidth shape then
        True

    else
        movingShapeToAbsolute movingShape
            |> Set.toList
            |> List.any (\p -> Set.member p tower.rocks)


type Direction
    = Left
    | Right


directionToFn : Direction -> (Int -> Int)
directionToFn direction =
    case direction of
        Left ->
            (+) -1

        Right ->
            (+) 1


testInput : String
testInput =
    ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"


puzzleInput : String
puzzleInput =
    "><<<>><<<>>><<<>>>><>>><>>>><<>><<>><>>>><<>>><<>><<>>>><<>>><<>><<<<><<<<><><<>><<<<>>>><<><<<>>><>>><<<>>><>><<<<><<<><<>><<<<>>><<<>>><<<>>><<<<><<<>>>><<<<>><<<<>>><<><><>>>><<<>>>><><<<<><<<><>>>><<<>><<>><<>><><<<<><<<<>>><>>>><<>>><><<>><<><<<<>><<>><<>>>><<<<>><<><<><<<<>><<>>><<<<>>><<>><<><<<>>>><<<>><<<>>><>><<><<<<>><<<<><><<<<>>><<<>>><<<>>>><<<<>>><<>>><<<<>>><<<><<><>><>><<<>>><<<<>>>><<>>>><<<<>>><<>>><>><<<>>><<<<>><<<<><>>>><>><>>><<<<>>>><<>>><<<<>><>>>><<<<>><><<<><>>><>>>><>><<<>><<><<<><<<<>>>><>><><<<<><<<>>>><<<<>>>><<<<>><<>><<>>><<<>>>><>>>><<<><<<>>><>><<<<>>><<<>><<<>>>><<>>>><<<>>><<><<><<<<>><<>>><>>>><<>>>><<><<<<>>><<<<><<<<>>><<>>><>>><<>>>><<<<>>>><<><>>><<<<>><<><<>><<<<>><<<<>>><<<>><><<<><<<<>>>><<>>><><<>><<<>><<>>><<<<>><>><<<>><<<>>><>>><>>>><<<><>><<>>>><<<<>><<><<<<>><<<>><<>><<<>>>><><<<>>><>><<<><<<>>><<<><<<<>>><<>>><<<>>>><<<>><<>>><<>><<>>>><<>>>><>>>><<<<>><>>><<<><<<><<><<<<>>>><<>>><<<<><<<<>><>><<>><<<><<>>><>>>><>>>><<<<>>>><>>>><<<>><<<<>>><<<>>><>>><<><<>>>><<<><>>><<>>>><<<<><>>>><><<<<>>><<<>><>>><><<>>>><<<<>>><<<<><<>>><<>>>><>><<<<><<<><<<>>>><<><<<<>>>><<<>>><<<>><<>>><>>>><<<<>>>><<<<>><>><><<<><>>><>><>>>><<<<>>><<<<>><<<>><<<<>>>><<<><>>><<><<<>><<<>>>><<<>><>>>><<<<>>>><>>><<>>><<<>>><<<><>>>><>><<<<>>><>><<<><<<<>>><><<<<>>><<<<><<>>>><<<<>>><<<>><<<><><<>>>><>><<>>><>><<>>><<<<>><<<<><>><<<<>><<<><<>><>>>><<<>>>><<<<>>><<<<>>><>>><>>><<>>><<<<><<<<>><><<<>>><<>><<>>><>>><<<<>>><<<<>>><<<>>><<<<>>><<<<>>>><<>>><<<>><<<<><<><<>><>>>><<<<>>><<>><<>>><<<>>>><<<<>>><<<<><>>>><<<<>>>><<<><>><<<<>>><><<<><>>><<<<><<<<><>>><<<<>>><>>>><>>>><<>>>><<<>>><<>><<<<><<<>>>><<<<>>><<<<><<<<>><<<>><<>>><<<<>><>>>><<<<>><<>>><<<><<>>><<>><<>>>><<<<>>><<<<>>><<<<>>><>>>><>>><<><>><<<<>>>><>>><<>>><<<>><<<><<><<<>><<<>>>><>>><<>><<>>><<<<><<<>>><<<<>>>><<<>>><>>><<>>><<<<>>>><<><<>><>>><<>>>><>>>><>><<<>>>><<>>>><<<<>>><>>><<>>>><<<<>>>><><<<<>>>><<><<<<>>><<<<>>>><<>><>><<<<>>><<><<<>>>><<<>>><<<>>><<<<>>><<>><>>><<<>>>><>>>><<><>>><<<>>><>>><<<><<<><<>>><>>><<>>>><<><<<<>>>><<>><<<<>><<<<>>>><<<><>>><<><<<<>>>><<<>><<<>><>><>>>><>><><<>><<>><<<<><<><<>>>><>>><<<<><<>>>><<><<>>><<<<>><<<<><<<><>>><<>>>><<<<><<<<>>><<<>><<<<><<<<>>>><<>>>><<<<>>><<<><<<><<><<<<>>>><<<>>>><<<>>><<<<>><<<>>>><>>><<<<>><<>>>><<<>>>><>><<<<>>><<<<>>><<><<>>>><<<><<<<>>>><<<>><<>>>><<<>>>><<<><<<<>>><<<>>>><>><<<<>>><<>>>><><<<<>>>><<>><<<>><<<>><<<<>>>><<<<>>>><<<>>><<>>>><<<<><<<<>>><<<>>>><<<<>>><<<<>>><>>><<<<>><<>><>>>><<<><<<>>>><<<>>>><>>><<><><<<>>>><>>>><<<>>>><<>>>><><<<<>><>>><>>>><><<>>>><>>><<>>>><<<>><<>>>><<><<><<>><<<<>>><<<>>>><<>>><<<>>>><>><<<<>>><<>>><<<>>><<<>>>><<><>>><>>>><>>>><<<<>><<>>><><<>>><<>>><<>>><<>><><<<><<<<>>><<<<><<<<><<<<>><<<<><<<><<<<>>><<<<>>>><><<<>><>>><>>><>><<<>>>><<<>>>><<>>><<><>><<<>>><<<><>>><<<>>><<>><<>><<>>>><<<<>>><<<>>>><>><<>>>><<<<><<<>>><<>><<<><<<>>><>>>><<<<><<<>><>><<<>><>>>><<<<><>><<<<>><<>><>>>><<>><<<<>>>><>><>>>><<><<>><>>>><<<>>>><<<<>><>>><<>><<<<>><<<<><<<<>>>><>><<>><<<<><<<>>>><<<>><<>>>><<<>>>><>>>><<<>><<<>><<<><<>>><<>>>><<>>><<<>><<<>><<<>>><<>>><>><<><<<>><<><>><>><<<>>><<<<><<<><>>>><<<><>>><<<>>><<<<>>><<>>><<<<>>>><<>><<<>>>><<><<<><>>><<<>>><<<>><<<<>>><<>>><>><<<>><<>>><>>><<<>>><<<>>>><<<>>>><>>><<<<><>>>><><>>>><>><>>><>><<>><<<<>>>><><<<<>>><>>>><<>>><<<><<<>><<>><<<>>>><<>>>><><<<>>><<<<>><<<<><<>><>>><>><<<>>>><<<<>><<<>>>><<<<><<<>>><<>>>><<>><<<<>>>><<<<>>><<<>>><<>><<<>><>>>><<<>>>><<<<><>>><<><<<>>>><>>>><<>>>><>><<<><<>>><<<>>><<<<>>>><<<<>>><>><<>>><<<<>>>><<<<><<>><<>>><<<<>><<<<>><<><>>>><>>>><<>>>><<>>>><>><<<>>><<<>><<<<>>><<<>>><>><<>><<>><<<>><<<<><<<<><>>><<>>>><>>>><<<>>>><<<>><<><<><<<<>>>><<<<><<<>><<<><>>><<<<>><>><<><<<>><>>><<>>>><<><<>><<>><<<<><<>>><<<<>>><<<><<<<>><<<>>>><><<>>>><<>>>><<<>><<<<>>><<<<><><><<<>><<<<>>><<<<>>>><>>><<<>>>><<<<>><>><<<<>><<>><<<>><<<><<<><<<<>>>><><<>>>><>>><<>>>><>>>><<<<>>><<<>>><<<<><>>><><<<<>><<<<>>><<<<>>>><>>>><<<>>><<<<>>>><<<<>>><>>><<>><<>>>><<<<><<<<>><<>>><<><><<><<<<><<><<<><>>>><<<<>><<>>><>>><<><<>><<>>>><<<<><<<>>>><<>>>><<<><<<><>>><<<>>>><><<<>>>><><>>><<>>>><<<<>>><<<>>>><<<<>><<<>><<<<><<<><<>>>><>>><<<>>>><>>>><<<><<>>>><<<<>>>><>>><<<>><<>><<<<>>><<<>><>>>><<<<>>>><<><<<>>><<<<>><<<>>><><<<<>><<<<>><<><<>><>><><<<<><<>>><<<<>>><<>>><<<<>><<<<>><<><<<<>>><<>><<>>><><<<>>>><>>><<>>>><<<<>><<<<><<>>>><>>>><>>><<<<>>><>><>><<<<>><>>><<<>>>><<<><<<>><<<>>>><<>>><<<>>>><><>>>><<>><<<<>><<<<>>><<>><<>>><>><<<>><<<>>><<<<>>>><<<<>>>><>><<<<>>>><<><<<<>>><>>>><>>><<>>>><<<>>>><>>>><><<<><<>>>><><><<<<>>><<<<>><<<<><<><<<<>>><<<<>><<>>><<<>>><<<<>>><<<<><<<<>>>><<<<>>>><<<>><<>>><<<<><>>>><<>>>><<<<><<<><>>><<<>>>><>>><<<>><<<>><<<>>>><<>>><<><>><>>>><<<>>><<><<<>><<<<><>>><><<<<>><<<>><<<>>>><<><<<<>>><<<<>><<<>><<<>>><<>>>><>>><<>>><<<<><><<<>><<<><>><<>><<<<>>><<<>>>><<<<>>><<><<<<>>><<<>><<<>>>><<<<><><<>>><<<><<<>>><<<<>>>><>>>><<><<<><<<<>>>><<<><>>><<<<><<<<>><<>>>><<>><>>><>>><<>>><><><<<>>>><><>>><>>>><<<><<<<>><<<>>><<<<>><>>>><<><<><<<<>><><><<<>><<<<>>><<<<>>>><>><<<<>><>>>><>>><<<<><<<>>><<<<>><<<<>>>><<>>><<>><<<<>>>><<>>>><<<<>><><<<>>>><><<<<>><>>><<<<>><<<><<<<>>><<>>><<>>><<<>>>><>>>><>>><<>>>><<<<><><>>>><<<><><>>><>>>><<<<><<<<>>><<>>><<<<>>><>>>><<<<>>><<<>><<><>><<<<>>><<>>><<<>><><<<<>>>><<>>>><<<>>>><<>><<<>>>><<<>><<<<>>><>>>><<>>><<<<>><<<>>>><<<<>>>><<>><<<>>><<>><<><><>><<<<><<>><<<<>><<><<<>>>><<>>>><<<><>>>><><<>><<<<>>><<<>>><<<<>>><>>><<<>>><><>>>><<>>>><<<<><<><<>>>><<<>>>><<><<<<>>><<<<>>><<>><<<<><<<>>>><<<>>>><<<<>>>><<<<>>><<>><><>>>><<>><<<>>>><<<<>><<<<>>><<<<>>><><<<>>>><<<<>>><<>><<<><<<<>>><>>>><>>><<>>><<>><<<<>>><<<<>>><<<>><>>><<<>>><<>>>><<>>><<<><<<>><<><<<<>>>><>>>><>>><<>>><<<>>>><<>>>><<><<<>>>><<><<<>><>><<>><<<<>><<>><<<<><<<<><<>>><<<>>>><><<>>>><<<><<>>>><<<<><>><<>><<<>>><<<<>><>><<<<>><<<<>><<>>><<<<><<>>>><>>>><<>>>><>>><>>><<<<>>><><><>>><<<>><<<>><>>><><>><<<<>>>><<>>>><<<>><>>><>><<>>>><<<<>>>><<<>><<<>>><>><<<>>><<<<>><<<<>><<>>>><>><><<<>>><<<>>><><><<<>>>><<<<>><<<><<<<>>>><<<<>>><>><>>>><<<>><<<<><<<<>>>><<>><<<<>>><<><<>>>><<>>><<<>>>><<>>>><<>><<>>>><<<<>>>><<<>>><<>><<<>>><<>>>><<<<>>>><>>><<<<>>><<>>>><<<<><<<>>>><<>><>><<<>>><<<<>><>>>><<<<>>>><>>><<<<>>><>>>><<><<>>><<>><<<<>>>><<<>><<<>>><<<<>><<<>>><<<>><<<><<>><<>>>><<<<>><<<>>><<>><<<>>>><<>>>><<<<>>>><<<>>><<<<>>><<>>><<>>>><<<<><<<<>>>><<<<>><>><<<<>><<><<<<>>>><<>><<<<>>><<<><<<><><<<>>><<<<><>><<<>><<>>>><<>><><<><<>>><<<>><>>><<<<>><>>><><<<>>>><<<<>>>><<>><<>><<<<>>>><<>>>><<<<>><>><<>>><<<>><>><<><<>>>><<<<>><>>>><<<<>>><><>>><>><<<<><<<><<<<>>><<<<>><<<<>>>><>><>>>><<<<>>><>>><<<<>>><<<<>>><<>><<><<<>>><><<<>><>>>><>><>>>><<<<>>><<<<>>><><<<<>>><<>>>><<<<>>>><<<>>><<<>><<<<>><<<>>><<<<><><<<<><><<<>><<>>>><<<<>>><<<<>>>><<<><<<>>>><<>>>><<<<>>>><<>>><<>><<>><<<>>><><<<><<<<><>>><<<<>>>><<<<>>>><<>>><<<<>><<<>>><<>>>><><>>>><<<<>><<<><><<<<><>>><<>>><>><>>><<<>>>><<<>>><>>>><<>>><><<<><<<<><<>>>><>>>><<<<>>>><<<<>>>><<>>><>>><>><<>>><><<><<><<<>><>><><<><<>><<>>><<<>>><<<<>>>><><<><<><<>>><<<>>>><<><<<<>>>><<<>>><<>><><>>>><<<>>>><<>>>><<<>><<<><<>><<<<>>>><<<<>>>><<>>>><<<<>>><<>>><<>>>><<>><>><<<<>><<<<>>><>>>><<>><<>><>><>>>><<<<>>>><<<<>>><>>>><<>><<<><><<<><<<<>>><<<<>>><<<<>>><>>><><><>>>><>>>><<<<>>>><<<<>>>><<>>>><<<<>>>><<>><<<>>><<>>>><<><><>>>><>><<>><<<>>><<<<>>>><>>>><<>>>><><><<<<>>><<<>>>><<>>>><<>>><<>><<><>><<<>>><<<<>>><<<<>>><<>>><<<<>><<<<>><<<<>>><<<>><<<>>>><<<><><<>><>><<>><<<<>>><<<<><><<<>>>><<<<><<>>><<<>>><<<><<<<>><<><<<<>>>><<<<>>><<<<>>><<<<>><<><<>><<<>>><<<<>>>><>><>>><<<><<<<>>>><<<>>><<>><<>><<<<>>><<<>><<>>>><<>><><>>><<>>><<>><<><<<<>>>><>>><<><<>>>><<<>>><<>>><<>>><<<>>><<>>><<><<>>>><<<<>>>><<<>><<<>>><<>><<<>>>><<<<>>>><<<<><>>>><<<<>><>><<>>><>>><>>><<<<>>><<>><>><<>>><>><<>><><<<>>><<<><<<<>>><<<<>>>><<<<>>><<><<>>><<<<>><<<>><<<<>>><<<>><>>><<>>>><<<>>><<><<>><<>><<<>>>><><<<<>><<<>><<<><<<>>>><>>><<<>>>><<<><<>>><<<>>>><>>>><<<<>><<>>>><>>><<<<>>>><<<<>>><>><<<>><<>><<<><<<<>>><>>><<<>>>><><>>><<<<>>><>>>><<<>><<<<>><>>>><><<<>>>><><<<<>>><<>>>><>>><<<>>><<<><<<<>>><<<<><<<<>>>><<<<>><<>>>><<<<>>><>>>><<<>><<<><<<<><<<<>>>><<<>>><<<><>>>><<<>><<<>>><<<<>>>><<<>>>><<<>><<<>>><<>>>><<<<>>><<<><>>><>>>><>><<<>><<>><><<<<><<<>>><<<>><<<<>>>><<<>>>><<>>><<<<>>>><<<>>>><<<>>><<<>>>><>><>>>><<<>>>><<<<>>><<<<>><<<>><<<>>>><<>>><><<>><<<<>><<>>><<<<>>>><<<<>><<<<>>><>><<<>>><<>><<<<>><<<>>><<<><<>>>><<>>><><<<<><>>><<>>><<<<><<<<><>>><<>>>><<<>>>><<>>><<<<><<>>><<>>>><<<<>><<<>>><<<>><<<<>>><<<>><<<<>>><<>>>><>><<<<>>><<<>>>><<<<>><<<>>><<<<>><<><<><>>>><<<><>>>><<<>>><>>><>>>><<<>><<<<>><>><<<>>><<<<><>>>><<<<><<<<>>><<><<<>>>><<<><<><<<<>>>><<><<><<>><<<<>>>><<>>><>>><<<<>>>><<<<><<>><<<>>><<<<>>>><<<>>><>>>><<<<>>><<<>><<<>><<<>>>><<<>><<<<>>><><><<>>>><>>><<>>><<<>><<>>>><>>>><<<><>>>><>>>><<<>>>><<<>><<<<>>>><<<<><<<<>>><<>><<<>>><<<<>>>><>>>><<><<<<><<><>><<<>>><<<><<<<><<<<>>><<<<>>>><<<<>><<<<>>>><<>>><<<>>><<<>>>><<<>><<<>>>><<<<>>>><>>>><<><<>><<<<>><<>><<<<>>><>>>><<<<>><<>>><<>>>><<<><>><><<<<>>><<<><<>>>><<>>><<<<>>><<<>>><>>>><<>>><<<>>><<>><>><>>>><<><<<><<<<>>>><<<<><>>><>><<>>><<<><>>><<<<><>><<<<><<<<><<<<><>>>><<<>>><<<<>><<<<>>><<>>>><<>>>><>>>><<<>><<<<>><>>><<<><<>><><<>>><<<<>>><><<<<>>><>>><<>>><<>>>><><<<>>>><<>>><>>>><>>>><<<<>>><<>>>><<>>>><>><><<<<>>><<><<>>><<<<>>><<<<><<<<><<>>>><>>>><<<<>>>><<<<><<<<>>><<>>><<<><>>><<><<<>>>><<><>>>><><<>><<>>>><<>><<<><<<>>>><>>>><<<><>>><<>>><<<>>><<<<>>>><<<>><<<<><<<>>><<<<>><>>><<>>><<<<>><>><<<>>><><>><<<>>>><<>>>><<<><<<<>><<<<>>>><>><<><<>>>><<<>><>><<<<><>>><><<<<>>><><<<>>><<><<<>>>><><<>>><<><<>>><<<><<<<><<>><<<>>>><<<<>>>><<>>><<<><<<>>><>><<<<>><<>>><<<>><>>><<<><>><<>><<<>><<>><<>>><<<<>>>><>><<><<<<><>>><<<>>><<<<>><>><<>>>><<><<>><<>>><>>><<<>>><<><<<<><><<>>><<>>><<<><><<>>>><<<>><<<<>><<<>>><<<><>>><<>>><<>>>><><<>>><<>><>>>><<>><<<><>><<<>>><<<<>>><<>><<<>>>><<<>>><<>>><<<<>>>><<<>>>><<<>>>><>>>><<>>>><<<>>><<>>>><<>><<>>>><<<><><><<>>><<<>><<<><>>>><>>><<>><<<<>>><<<<>><<<>><>><<<<>><<<<><<<><<<<>><<<>>>><>>>><<>><<><<<>>><<<><<<>>><<>>>><<<>>>><>>>><<<><>>><<>>><<<<>>><<<<>>>><>>"
