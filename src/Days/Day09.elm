module Days.Day09 exposing (puzzleInput, run, solution, testSolution)

import Dict exposing (Dict)
import Expect
import Set exposing (Set)
import Test


solution : String -> ( String, String )
solution input =
    ( parseInput input
        |> tailPositions (startRope 2)
        |> Set.size
        |> String.fromInt
    , parseInput input
        |> tailPositions (startRope 10)
        |> Set.size
        |> String.fromInt
    )


run : String -> Int -> Int -> String
run input length frame =
    let
        directions =
            parseInput input
                |> List.take frame
    in
    ropeWay directions (startRope length)


testSolution : Test.Test
testSolution =
    Test.test "test input" <|
        \_ -> ( "13", "1" ) |> Expect.equal (solution testInput)


type alias Rope =
    List Position


ropeLast : Rope -> Position
ropeLast rope =
    rope
        |> List.reverse
        |> List.head
        |> Maybe.withDefault ( 0, 0 )


startRope : Int -> Rope
startRope n =
    List.repeat n ( 0, 0 )


ropeToDict : Rope -> Dict Position Char
ropeToDict rope =
    rope
        |> List.indexedMap (\idx pos -> ( pos, (idx + Char.toCode '0') |> Char.fromCode ))
        |> dictFromListIfNothing


dictFromListIfNothing : List ( comparable, v ) -> Dict comparable v
dictFromListIfNothing =
    List.foldl
        (\( key, value ) ->
            Dict.update key
                (\maybeOldValue ->
                    case maybeOldValue of
                        Nothing ->
                            Just value

                        Just v ->
                            Just v
                )
        )
        Dict.empty


printRope : Rope -> String
printRope rope =
    let
        addSize =
            5

        grid =
            ropeToDict rope

        minXY =
            List.foldl (comPos min) ( 0, 0 ) rope

        maxXY =
            List.foldl (comPos max) ( 0, 0 ) rope
    in
    List.range (Tuple.second minXY - addSize) (Tuple.second maxXY + addSize)
        |> List.map
            (\lineNr ->
                List.range (Tuple.first minXY - addSize) (Tuple.first maxXY + addSize)
                    |> List.map
                        (\columnNr ->
                            Dict.get ( columnNr, lineNr ) grid |> Maybe.withDefault '.'
                        )
                    |> String.fromList
            )
        |> String.join "\n"


ropeWay : List Direction -> Rope -> String
ropeWay directions rope =
    let
        fn newRope _ =
            newRope
    in
    moveRopeMany rope directions fn rope
        |> printRope


type alias Position =
    ( Int, Int )


comPos : (Int -> Int -> Int) -> Position -> Position -> Position
comPos fn ( p1X, p1Y ) ( p2X, p2Y ) =
    ( fn p1X p2X
    , fn p1Y p2Y
    )


type alias Direction =
    Position -> Position


toLeft : Direction
toLeft ( x, y ) =
    ( x - 1, y )


toRight : Direction
toRight ( x, y ) =
    ( x + 1, y )


toTop : Direction
toTop ( x, y ) =
    ( x, y - 1 )


toBottom : Direction
toBottom ( x, y ) =
    ( x, y + 1 )


parseInput : String -> List Direction
parseInput input =
    let
        parseLine : String -> List Direction
        parseLine line =
            case String.split " " line of
                [ d, countStr ] ->
                    case String.toInt countStr of
                        Nothing ->
                            []

                        Just count ->
                            let
                                xTimes =
                                    List.repeat count
                            in
                            case d of
                                "L" ->
                                    xTimes toLeft

                                "R" ->
                                    xTimes toRight

                                "U" ->
                                    xTimes toTop

                                "D" ->
                                    xTimes toBottom

                                _ ->
                                    []

                _ ->
                    []
    in
    String.lines input
        |> List.foldl
            (\line full ->
                full ++ parseLine line
            )
            []


tailPositions : Rope -> List Direction -> Set Position
tailPositions rope directions =
    let
        fn newRope set =
            Set.insert (ropeLast newRope) set
    in
    moveRopeMany rope directions fn Set.empty


moveRopeMany : Rope -> List Direction -> (Rope -> a -> a) -> a -> a
moveRopeMany rope directions fn start =
    directions
        |> List.foldl
            (\d ( lastRope, lastA ) ->
                let
                    newRope =
                        moveRope d lastRope
                in
                ( newRope, fn newRope lastA )
            )
            ( rope, fn rope start )
        |> Tuple.second


moveRope : Direction -> Rope -> Rope
moveRope direction rope =
    rope
        |> List.foldl
            (\e before ->
                case before of
                    [] ->
                        direction (List.head rope |> Maybe.withDefault ( 0, 0 ))
                            |> List.singleton

                    head :: _ ->
                        moveTail head e :: before
            )
            []
        |> List.reverse


moveTail : Position -> Position -> Position
moveTail ( headX, headY ) (( tailX, tailY ) as tail) =
    let
        diffX =
            headX - tailX

        diffY =
            headY - tailY
    in
    if abs diffX > 1 || abs diffY > 1 then
        let
            vecX =
                diffX // abs diffX

            vecY =
                diffY // abs diffY
        in
        ( tailX + vecX, tailY + vecY )

    else
        tail


testInput : String
testInput =
    """R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2"""


puzzleInput : String
puzzleInput =
    """R 1
L 1
U 1
L 2
U 2
D 2
U 1
R 1
D 1
R 2
D 1
U 1
D 2
R 2
L 2
R 2
D 2
R 2
D 1
L 2
U 1
R 2
U 1
L 1
D 1
R 1
L 1
D 2
L 2
U 1
R 1
L 2
U 2
D 2
L 2
R 1
L 2
U 2
L 2
D 2
U 2
D 1
L 2
D 1
L 1
D 2
R 1
D 1
R 2
D 2
U 2
D 2
L 1
R 1
D 1
L 1
U 1
L 2
R 1
U 2
L 1
D 2
L 1
D 2
U 1
L 1
D 1
R 2
L 2
R 2
L 2
D 1
U 2
L 1
U 1
R 2
D 1
R 2
L 2
D 1
R 2
U 1
D 1
L 2
R 1
U 1
D 1
L 2
D 1
L 2
U 2
R 1
L 1
D 2
U 1
D 1
U 1
R 2
L 2
R 2
L 2
U 2
L 1
U 1
L 2
R 2
L 1
U 1
R 2
U 1
L 2
D 1
U 2
D 1
L 1
U 3
D 3
L 1
D 1
L 2
D 1
R 2
U 1
D 3
R 1
U 1
D 2
U 3
D 2
U 2
R 3
D 3
L 1
R 2
U 3
D 2
R 3
U 1
L 3
U 2
L 2
U 3
R 2
D 3
U 1
R 1
L 3
R 2
L 1
U 3
L 3
U 3
L 3
R 2
U 2
R 2
U 1
R 2
D 3
U 2
D 3
R 2
U 3
D 3
U 1
R 2
L 3
D 1
R 1
D 1
R 3
D 3
R 2
D 2
U 1
R 1
D 1
U 1
D 2
U 3
L 3
R 1
L 1
R 1
U 3
R 3
D 1
R 2
L 2
R 2
U 1
L 3
R 3
U 1
D 2
U 3
L 2
D 2
L 2
U 1
R 1
U 1
D 1
L 2
U 2
D 3
L 1
D 1
L 1
D 3
R 2
L 3
U 1
R 1
L 2
D 2
U 2
R 2
L 3
D 2
L 3
D 1
L 3
D 4
U 2
L 3
R 3
U 1
R 4
L 3
R 1
U 3
D 2
L 3
U 1
R 2
U 3
R 3
L 4
D 2
R 3
D 3
U 2
D 4
R 2
D 3
L 1
R 2
D 2
U 1
R 1
L 2
R 4
U 3
R 1
U 1
L 1
R 4
U 2
L 1
R 2
L 3
R 1
D 3
U 4
L 3
U 3
L 4
R 4
U 4
R 1
L 1
U 3
D 4
L 1
U 1
L 2
D 3
U 2
L 4
U 4
D 3
L 2
D 2
U 2
D 2
U 1
L 3
D 1
L 1
U 3
R 3
L 2
R 1
D 3
R 4
L 4
U 3
D 1
R 4
L 4
R 4
L 1
D 3
R 3
U 3
D 2
R 4
D 3
L 2
U 2
R 3
U 3
L 1
U 4
L 4
D 3
R 2
L 1
R 2
D 1
L 1
U 2
L 3
D 4
R 3
L 2
D 3
U 4
D 2
U 4
R 2
D 3
L 4
U 3
L 5
U 4
R 2
U 1
L 2
D 4
U 2
R 3
L 3
D 5
L 4
U 3
L 1
R 5
U 4
R 2
U 1
R 2
U 2
D 4
U 3
L 5
D 1
R 3
D 5
L 1
R 5
D 3
L 2
R 3
L 3
D 4
L 5
U 1
R 1
U 1
L 1
R 4
L 5
R 5
D 1
R 3
D 2
U 4
R 2
U 2
L 1
U 1
D 3
U 1
D 3
L 1
R 1
U 3
L 2
U 5
R 1
D 5
R 5
L 5
U 1
D 1
U 3
L 3
D 2
U 4
L 4
U 3
R 1
L 2
D 1
L 2
D 2
U 1
R 3
U 2
L 4
R 5
L 3
R 5
U 4
L 5
D 3
U 5
L 5
D 1
R 5
L 2
D 3
U 2
L 1
D 2
L 5
D 1
R 5
D 2
R 4
L 3
D 2
L 4
D 2
L 1
D 1
L 3
D 4
R 1
U 2
R 3
U 2
D 6
U 6
D 2
U 3
D 4
U 2
L 2
D 2
U 6
R 5
L 6
R 1
L 5
U 5
D 3
U 3
R 4
D 2
R 4
D 4
L 1
D 5
L 6
D 2
U 6
D 1
L 3
U 1
L 5
D 4
R 2
U 1
R 6
L 6
R 3
U 6
D 6
R 2
U 2
D 3
R 4
U 6
D 1
R 6
L 5
U 3
R 6
L 4
U 1
L 6
R 3
L 5
U 4
L 6
D 1
L 3
D 1
U 1
L 1
D 5
R 5
L 4
U 4
L 3
D 2
R 1
L 6
D 6
L 1
D 4
L 2
R 5
U 6
L 6
U 2
D 3
L 1
D 4
L 4
U 3
L 6
U 3
D 3
U 3
L 2
U 2
D 6
U 5
R 1
U 2
L 3
U 5
D 2
U 2
R 3
D 4
U 5
D 1
L 1
D 2
R 3
U 6
R 2
D 5
U 5
R 3
L 3
U 3
L 4
R 1
U 3
L 3
D 1
U 7
L 3
U 1
D 3
U 4
L 6
R 2
D 4
U 5
D 7
L 1
D 4
U 6
D 4
U 1
R 4
U 4
R 1
L 4
R 6
L 7
R 3
D 1
L 7
R 6
L 5
D 1
U 4
D 3
R 2
D 6
U 1
D 3
L 4
D 1
U 6
D 7
L 5
D 6
L 2
U 4
R 7
U 1
D 5
U 1
D 3
R 3
D 3
L 6
D 4
U 4
D 2
U 1
R 5
D 2
U 4
D 3
R 1
U 5
D 2
R 1
U 3
R 5
L 5
D 1
U 2
R 1
D 6
R 6
U 3
L 5
D 4
U 6
R 3
U 1
D 7
U 6
R 1
D 5
U 3
D 2
R 5
U 1
D 2
L 2
R 5
L 1
R 7
U 3
L 3
R 5
U 5
L 6
R 6
D 1
U 1
R 7
D 6
U 6
L 1
D 2
L 4
R 6
D 2
R 7
L 4
U 5
D 5
U 4
R 5
D 3
L 7
U 7
L 2
R 7
L 7
R 7
D 6
U 6
D 4
R 8
D 7
U 7
D 4
U 5
D 1
L 1
R 1
D 5
R 4
D 1
L 8
D 7
U 6
R 5
U 4
R 8
U 3
L 2
U 4
L 1
U 8
L 2
U 3
L 6
D 6
L 6
D 2
L 7
R 8
U 6
R 5
U 7
L 1
D 1
R 7
L 1
R 8
U 1
L 7
U 2
R 7
D 2
R 4
D 5
L 8
R 6
D 7
R 7
L 7
U 6
L 4
D 3
L 7
R 7
U 6
L 8
D 3
L 2
U 1
R 7
U 5
L 4
D 1
U 2
D 5
L 1
U 5
R 4
D 7
U 5
D 6
L 6
D 1
L 2
D 4
R 1
D 5
U 5
R 3
U 4
L 2
U 3
L 1
U 8
D 1
R 6
L 7
R 8
D 4
L 8
D 3
R 1
L 5
D 5
R 1
U 5
L 4
R 1
U 8
R 7
U 2
R 8
L 6
D 1
R 6
U 1
R 7
L 7
U 6
D 1
R 9
L 1
U 3
D 9
R 1
D 2
U 5
L 8
D 9
U 8
L 6
U 2
L 1
D 4
U 3
D 8
R 1
U 3
R 9
L 6
D 9
L 3
R 1
D 3
U 7
L 2
D 2
U 9
D 9
U 5
R 1
L 4
R 1
U 8
R 7
U 6
R 7
D 3
L 1
U 5
R 1
L 3
U 5
D 3
U 1
L 3
R 5
L 9
R 5
L 6
U 5
L 4
D 1
U 5
L 6
D 4
R 1
L 5
D 5
L 9
U 2
L 9
R 7
L 3
R 7
L 2
U 8
R 9
D 6
R 3
D 8
U 8
D 3
R 4
L 7
R 7
L 1
U 7
R 5
D 7
U 6
L 2
D 2
L 5
D 2
R 3
D 2
L 8
U 9
L 5
D 7
U 1
R 6
L 4
U 7
D 1
U 9
D 1
L 4
U 6
L 4
D 1
R 6
U 7
R 10
L 6
R 6
L 4
U 7
L 7
U 7
R 2
D 4
R 6
L 10
D 1
R 10
D 9
U 6
R 1
D 7
U 1
D 7
U 1
R 9
D 6
R 4
D 4
R 1
U 4
D 2
R 9
U 4
D 6
R 2
U 5
R 1
L 10
D 6
L 8
U 2
R 10
L 2
R 9
U 5
R 9
L 7
U 1
L 9
R 1
D 4
U 5
R 9
D 4
U 4
R 4
L 2
D 9
L 10
R 4
D 9
L 6
D 1
L 7
R 8
L 8
U 9
R 1
U 6
D 8
U 4
R 1
D 1
L 2
D 6
U 4
L 4
R 9
L 5
D 2
R 9
U 3
L 1
R 7
U 8
R 9
L 2
U 6
D 4
R 2
U 5
D 5
U 10
D 4
L 10
R 10
U 2
L 2
U 4
D 2
L 7
R 10
U 3
L 10
U 1
D 9
R 10
U 2
R 10
U 2
D 6
L 11
R 2
D 10
R 4
U 9
L 6
D 3
U 3
R 7
L 9
R 11
L 2
D 5
R 7
D 7
L 10
U 10
R 7
L 1
D 2
U 5
D 9
R 5
D 4
L 8
D 5
R 3
D 10
U 5
D 10
L 9
U 6
L 7
U 7
R 4
D 11
L 5
R 11
D 6
L 5
U 1
L 10
R 7
U 3
L 8
D 7
U 4
L 3
U 3
D 4
U 11
L 8
D 10
R 9
U 5
R 5
U 3
L 5
R 9
L 7
D 11
R 2
D 8
U 7
R 8
D 10
R 3
U 6
L 10
R 8
D 9
R 7
U 2
D 2
U 11
L 10
R 8
U 9
R 10
L 6
U 8
D 4
L 11
R 5
U 10
R 3
L 4
R 5
D 11
U 3
R 2
L 7
R 10
U 9
R 8
L 7
D 10
L 6
R 1
L 7
D 7
L 2
U 4
D 7
U 9
D 9
L 5
U 5
D 10
R 1
D 8
L 9
R 5
U 11
D 3
L 4
U 2
D 1
U 7
L 12
R 11
U 6
R 2
U 11
R 3
U 9
L 10
D 10
L 7
D 7
U 2
L 2
U 8
D 6
U 11
R 8
U 7
R 12
L 12
U 11
D 3
R 2
L 3
D 4
R 3
D 7
R 3
U 3
D 4
L 12
R 10
U 9
L 10
U 4
R 2
L 1
R 3
D 10
U 12
R 12
L 6
D 5
L 1
R 5
U 2
D 12
R 8
U 11
D 1
R 1
D 9
U 1
L 9
U 10
L 5
D 5
R 5
L 8
R 4
U 12
R 4
D 8
R 2
U 7
R 7
U 1
R 6
D 4
U 7
D 6
L 12
D 9
U 7
D 7
U 4
R 3
D 10
U 2
L 8
U 4
D 2
U 2
R 7
D 1
U 4
R 6
U 7
D 5
L 10
R 11
U 8
D 6
L 7
D 10
U 12
D 2
R 6
L 1
R 5
L 2
U 4
R 5
L 1
U 11
L 6
U 11
L 10
U 3
R 13
D 4
L 7
D 5
U 1
D 8
L 8
D 12
L 12
U 3
D 11
U 4
L 3
U 10
R 5
U 11
L 13
R 7
D 2
L 13
U 8
L 6
D 6
L 6
U 11
D 1
U 6
R 9
D 6
L 8
U 3
L 8
D 8
L 13
R 6
L 13
R 2
U 12
D 9
L 5
D 3
R 11
U 10
D 8
L 13
R 10
U 10
L 9
U 1
D 4
U 13
L 7
U 12
D 13
L 2
U 8
D 9
L 13
R 4
U 2
D 13
R 5
D 10
U 3
D 12
U 8
R 3
D 9
R 10
L 4
U 8
D 5
U 13
L 4
R 5
L 5
R 5
D 1
L 9
U 8
L 5
U 4
D 11
U 2
D 6
L 7
R 2
D 12
R 12
L 5
D 6
U 9
L 2
R 10
L 7
D 10
U 12
R 3
U 8
L 8
R 4
U 2
R 4
U 11
D 7
R 1
D 4
L 6
D 14
U 3
R 4
U 7
D 11
L 7
D 10
R 8
U 2
D 6
R 5
D 6
U 1
L 3
U 12
R 9
D 7
R 2
L 1
D 3
L 4
U 12
R 2
L 13
U 5
R 6
U 13
D 4
L 12
R 10
D 1
R 6
L 3
D 6
L 9
D 11
R 2
U 9
L 14
R 13
D 14
L 5
R 9
L 7
D 4
L 14
R 8
U 1
L 13
U 13
R 10
L 8
D 10
L 2
U 10
R 11
U 4
L 7
R 9
L 9
U 10
R 9
D 3
L 3
D 9
L 14
U 5
R 8
U 12
R 13
U 12
R 11
D 12
U 6
D 5
R 13
U 12
D 6
R 8
D 7
U 9
R 11
L 7
R 6
L 12
D 2
R 9
U 11
L 7
R 12
U 9
L 3
U 2
R 8
D 5
L 11
R 4
D 12
L 14
U 10
R 3
D 3
L 11
D 2
R 14
L 3
R 3
U 3
R 2
D 8
U 4
R 11
L 13
R 5
L 3
U 11
R 7
U 2
R 6
D 8
L 3
R 5
U 11
D 15
U 1
D 13
L 11
U 13
D 4
L 14
D 15
R 1
U 14
L 6
U 12
L 6
U 11
L 6
R 11
U 15
D 8
R 8
L 10
D 9
R 1
U 8
D 1
L 6
U 5
R 15
U 11
D 2
R 14
D 13
L 15
U 7
R 9
U 6
L 9
R 15
L 14
U 10
R 8
D 7
U 12
R 9
U 15
D 11
U 2
R 12
D 13
R 12
D 2
L 4
U 13
D 15
U 9
R 2
U 5
L 15
D 3
L 2
U 7
D 6
L 11
D 2
R 12
L 6
D 5
L 9
R 11
L 14
R 2
L 8
R 9
U 6
L 3
U 12
L 15
D 7
L 14
D 12
L 15
U 14
D 9
R 5
L 11
R 15
D 8
R 1
D 14
U 6
D 7
R 1
L 6
U 5
R 12
U 8
D 13
R 13
U 1
L 12
D 2
U 10
R 13
U 10
L 16
U 15
D 2
R 15
L 3
D 2
R 4
L 6
U 9
L 2
D 3
U 9
D 12
R 5
D 2
U 8
D 6
R 1
L 4
D 8
U 16
R 13
L 12
D 4
L 9
U 14
D 15
U 5
L 1
R 5
U 4
R 3
L 14
D 1
R 2
U 14
L 1
U 14
R 12
D 8
U 1
D 10
L 12
U 8
R 6
U 16
L 4
U 12
R 2
L 3
D 5
L 3
U 16
D 10
L 16
U 2
D 8
L 9
D 3
R 3
U 7
D 4
L 1
R 6
L 15
U 3
L 9
D 11
U 9
L 4
R 10
U 10
D 11
U 9
R 7
L 16
D 16
U 14
D 16
L 6
D 12
U 6
D 10
U 10
L 7
R 14
U 3
L 8
U 7
R 7
L 2
U 15
L 7
R 5
L 16
R 9
L 1
R 10
D 11
R 9
L 9
D 14
R 9
U 15
R 16
D 1
U 9
R 4
L 15
U 17
R 7
U 13
L 11
D 2
U 4
R 16
U 10
L 15
U 10
D 7
U 5
D 11
R 9
U 5
R 17
U 6
L 2
U 12
D 8
L 17
U 15
D 17
L 17
D 13
R 15
L 4
R 8
U 3
D 5
L 4
R 6
U 1
D 1
L 4
D 10
U 8
L 14
U 12
R 12
U 1
L 11
D 16
L 10
U 13
L 2
U 13
R 16
L 14
R 9
D 13
U 16
D 16
L 12
D 1
U 4
D 2
L 7
D 14
U 17
D 2
U 15
L 6
R 5
D 15
U 17
R 12
L 6
R 12
D 10
L 8
R 12
U 13
R 7
D 6
L 2
D 11
L 14
R 7
L 16
R 5
U 2
D 2
L 7
D 13
U 10
D 15
R 3
U 17
L 16
U 15
D 7
L 5
U 8
L 3
D 11
U 16
L 6
U 14
D 11
R 5
L 8
D 9
L 2
U 16
L 12
D 5
R 17
L 3
U 7
D 2
R 12
U 9
R 1
U 8
L 5
U 15
R 5
U 15
L 6
U 2
D 10
L 17
R 15
U 3
R 18
L 4
R 13
D 10
L 5
R 14
L 12
U 11
R 3
U 16
R 16
D 6
R 16
L 15
R 9
U 1
L 15
U 14
L 2
R 14
L 16
D 1
R 16
L 1
U 6
D 2
U 6
R 1
U 11
R 1
L 14
U 18
D 8
L 13
D 7
R 13
U 18
D 10
U 7
D 11
L 11
U 7
D 12
L 14
R 1
L 16
U 16
L 10
D 8
U 9
L 1
R 18
D 7
R 6
L 5
R 9
U 12
R 11
D 9
R 5
L 13
R 8
D 2
R 12
L 14
R 6
L 16
D 8
U 18
L 5
D 15
U 7
R 18
U 6
R 5
L 18
R 9
U 15
R 15
D 4
R 7
D 18
L 18
R 15
D 8
L 16
D 17
U 5
L 16
D 11
R 5
U 7
D 2
R 11
U 17
L 3
R 9
U 11
D 6
L 8
R 11
U 17
D 2
R 16
U 2
L 15
D 11
U 7
R 16
U 14
L 4
R 8
D 18
R 9
U 18
L 10
D 16
U 15
D 19
L 16
D 17
L 6
U 16
D 7
L 5
U 2
D 11
U 9
L 4
U 5
R 10
L 17
D 16
U 7
D 16
U 15
R 3
U 16
R 15
L 3
U 14
R 5
L 6
U 5
D 4
R 19
D 3
U 8
D 12
R 19
U 18
R 5
U 5
L 14
D 6
R 9
L 19
D 10
U 18
L 5
D 6
L 12
U 13
R 19
U 4
R 1
L 6
D 14
L 17
D 19
L 2
R 13
U 18
D 14
U 11
R 19
L 8
R 12
L 3
U 19
R 5
L 4
D 9
U 9
L 19
U 16
L 1
D 9
R 15
L 16
R 2
D 1
L 7
U 1
D 4
L 19
R 15
D 7
U 7
L 17
D 9
U 19
D 6
R 19
U 16"""
